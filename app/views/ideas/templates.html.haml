- old_ts = Time.local(2020,1,1)
- newer_ts = Time.local(2025,1,1)

- question = Question.new member_id: 1, status: "ok", text: 'Question text', num_answers: 1000, anonymous: false, ver: 1, idea_criteria: "5..1000", answer_criteria: "5..1500", default_answer_id: nil, team_id: 1, order_id: 1
- question.created_at = old_ts
- question.updated_at = newer_ts
- question.id = 1

- theme = Idea.new text: 'theme text', role: 2, member_id: 1, team_id: 1, question_id: 1, parent_id: 1, order_id: 1, visible: true, version: 0
- theme.created_at = old_ts
- theme.updated_at = newer_ts
- theme.id = 1
- @project_coordinator = true

- idea = Idea.new text: 'idea text', role: 1, member_id: 1, team_id: 1, question_id: 1, parent_id: 1, order_id: 1, visible: true, version: 1
- idea.created_at = old_ts
- idea.updated_at = newer_ts
- idea.id = 2

- question.themes = [theme]	
- question.themed_ideas = [idea]

- comment = Comment.new #(:created_at => old_ts, :updated_at => newer_ts)
- comment.created_at = old_ts
- comment.updated_at = newer_ts
- comment.anonymous = false
-	comment.publish = true
- comment.author = Member.find(1)
- comment.text = 'This is the comment text'
- comment.id = 0
- upload = Upload.new 
- upload.attachment_content_type = 'doc'
- upload.attachment_file_name = 'filename'
- comment.attachments = [upload]

- endorsement = Endorsement.new text: 'My endorsement'
- endorsement.member = comment.author
- endorsement.member.id = @member.id
- endorsement.updated_at = newer_ts


%div#get_templates_scripts
	- if debug
		%h2 ideas/get_templates.html.haml
		= javascript_include_tag 'application_ce'
		= javascript_include_tag 'opt/pure.js'
		

	%script
		:plain
			templates_loaded = true;
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};
			
			function simple_format(s){
				var strs = unescape(s).replace(/\r/g,'').split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				return s.replace(/\n/g,'<br/>')
			}

			function comment_with_author(data){
			  //com = simple_format(auto_link(h(comment.text), :all, :target => "_blank"))
				com = simple_format( data.comment.comment.text );
				var author_link = templates['comment'].find('a.com_author'); 
				author_link.attr('href', author_link.attr('href').replace(/\w{14}/,data.author.member.ape_code));
				author_link.html( data.author.member.first_name + ' ' + data.author.member.last_name);
			  return com.replace(/<p>/,'<p>' + author_link.prop('outerHTML') + ' ');
			}
			
			function endorsement_with_author(data){
				if(data.endorsement.endorsement.text == ''){
					data.endorsement.endorsement.text = ' endorsed this proposal';
				}
				endorsement = simple_format( data.endorsement.endorsement.text );
				var author_link = templates['comment'].find('a.com_author'); 
				author_link.attr('href', author_link.attr('href').replace(/\w{14}/,data.member.member.ape_code));
				author_link.html( data.member.member.first_name + ' ' + data.member.member.last_name);
			  return endorsement.replace(/<p>/,'<p>' + author_link.prop('outerHTML') + ' ');
			}

			function sanitize(s){
				return s.replace(/\s*(<p[^>]*>)\s*/ig,'$1').replace(/<\/p>/ig,'\n\n').replace(/<\/br\s*\/>/ig,'\n').replace(/<[^>]+>/gm,'');
			}

	- if debug
		%h3 ideas/theming_page
					
		= render( :partial => 'ideas/post_its_wall', locals: { debug: debug, question: question })
		= stylesheet_link_tag "ce/theming_page"


	%script#theme_page_template{:type=>'text/html'}
		:plain
			#{ render( :partial => 'ideas/post_its_wall', locals: { debug: debug, question: question })}
	
	%script#create_theme_page_template
		:plain
			templates['theme_page'] = $('<div></div>').html($.trim( $('script#theme_page_template').html() )).find('div:first');
			templates['new_theme_col'] = templates['theme_page'].find('div.theme_col.themes[id="1"]');
			template_functions['theme_col'] = templates['new_theme_col'].compile(
				{
					// directives go here
					'@id' : 'data.id',
					'li.theme_post_it div.post-it @id' : 'data.theme_id',
					'li.theme_post_it p' : 'data.theme_text',
					'li.idea_post_it div.post-it @id' : 'data.theme_idea_id',						
					'li.idea_post_it p.idea' : 'data.theme_idea'	
				}
			);
			
			realtime_data_update_functions['theme_col'] = 
				function(data){
					var new_theme_col = template_functions['theme_col']( data );
					if(data.side == 'left'){
						// insert after data.col_par
						new_theme_col = $(new_theme_col).insertBefore(data.col_par);
					}else{
						// insert after data.col_par
						new_theme_col = $(new_theme_col).insertAfter(data.col_par);
					}
					resize_theming_page();
					make_ideas_sortable(new_theme_col.find('ul.sortable_ideas'));
					
					// insert the attachments into the idea in the new theme
					var temp_id = temp.new_answer_group_idea.find('div.post-it').attr('id');
					//var new_idea_id = new_theme_col.find('div.post-it').attr('id');
					if(temp_id == data.data.theme_idea_id){
						new_theme_col.find('div.post-it').find('p.idea').after(temp.new_answer_group_idea.find('div.attachments'));
					}
					
					$.getScript('/idea/' + data.data.id + '/details?act=theming_popup&mode=edit')
					return new_theme_col;
				}

				//debugger
				templates['post-it'] = templates['new_theme_col'].find('li.idea_post_it div.post-it');
				template_functions['post-it'] = templates['post-it'].compile(
					{
						// directives go here
						'@id' : 'id',
						'p.idea' : 'text'	
					}
				);

				templates['new ideas col'] = templates['theme_page'].find('div.theme_col.unthemed_ideas');
				template_functions['new ideas col'] = templates['new ideas col'].compile(
					{
						// directives go here
						'@id': 'question_id',
						'h3' : 'title'
					}
				);

	- if debug
		%h3 ideas/_comment
		= render( partial: 'ideas/comment', collection: [comment], as: 'comment', locals: {hide_coms_lt: 0}, formats: [:html]  )
		
	%script#comment_template{:type=>'text/html'}
		:plain
			#{ render( partial: 'ideas/comment', collection: [comment], as: 'comment', locals: {hide_coms_lt: 0}, formats: [:html]  )}

	%script#create_comment_template
		:plain
			templates['comment'] = $('<div></div>').html($.trim( $('script#comment_template').html() )).find('div:first');
			template_functions['comment'] = templates['comment'].compile(
				{
					'div.com_text' : function(arg){ return comment_with_author(arg.context.data)},
					'p.timeago @title' : 'data.comment.comment.created_at',
					'img.i36 @src' : 'data.photo_url'
				}
			);
						
			// template_functions['comment']( com )
			
			realtime_data_update_functions['comment'] = 
				function(data){
					var new_comment = template_functions['comment']( data );
					var form = $('form.add_comment[id="' + data.data.comment.comment.parent_id + '"]')
					new_comment = $(new_comment).insertBefore( form.closest('div.comment.form'));
					new_comment.find('p.timeago').timeago();
					new_comment.addClass('new');
					form.val('').blur();

					if( data.data.attachments && data.data.attachments.length > 0){
						var attachment_original = new_comment.find('div.attachment').remove();
						$.each( data.data.attachments, 
							function(index,data){
								var attachment = attachment_original.clone();
								var att_data = data.upload;
								attachment.find('a').attr('href', att_data.url);
								attachment.find('img').attr('src',att_data.icon);
								attachment.find('p').html(att_data.attachment_file_name);
								new_comment.find('div.attachments p.clear').before(attachment);
							}
						);
					}else{
						new_comment.find('div.attachments').remove();
					}

					new_comment.effect('highlight', {color: '#EAF8D0'},3000);				
					//setTimeout(function(){ 
					//	var new_comment = $(this);   
					//	//if(!new_comment.isOnScreen())
					//	var par = new_comment.closest('div.idea_details.popup');
					//	if(par.size() == 0){
					//		par = $('html body');
					//	}
					//	var new_scroll_pos = par.scrollTop() + new_comment.height() + 40;
					//	par.animate({scrollTop: new_scroll_pos }, 800);
					//}.bind(new_comment),100
					//);
					
					return new_comment;
				}

	%script#endorsements_template{:type=>'text/html'}
		:plain
			#{ render( partial: 'endorsements/endorsements', locals: {endorsements: [endorsement], team_id: 10000, print: false}, formats: [:html]  )}

	%script#create_endorsements_template
		:plain
			templates['endorsement'] = $('<div></div>').html($.trim( $('script#endorsements_template').html() )).find('div.endorsement:first');
			templates['endorsement_form'] = $('<div></div>').html($.trim( $('script#endorsements_template').html() )).find('div.form.endorsement');
			template_functions['endorsement'] = templates['endorsement'].compile(
				{
					'@id' : 'data.endorsement.endorsement.id',
					'div.com_text' : function(arg){ return endorsement_with_author(arg.context.data)},
					'div.timeago @title' : 'data.endorsement.endorsement.created_at',
					'img.i36 @src' : 'data.photo_url'
				}
			);
						
			realtime_data_update_functions['endorsement'] = 
				function(data){
					var new_endorsement = template_functions['endorsement']( data );
					new_endorsement = $(new_endorsement).appendTo( 'div.endorsements_inner' );

					new_endorsement.find('form').each(
						function(){
							var link = $(this);
							link.attr('action', link.attr('action').replace(/\d+/,data.data.endorsement.endorsement.team_id));
						}
					);
					new_endorsement.find('span.timeago').timeago();
					new_endorsement.addClass('new');

					new_endorsement.effect('highlight', {color: '#EAF8D0'},3000);				
					call_to_action_completed('read our vision')
					call_to_action_completed('endorse our vision')			
					
					return new_endorsement;
				}


			realtime_data_update_functions['delete_endorsement'] = 
				function(endorsement_id, photo_url){
					$('div.endorsement[id="' + endorsement_id + '"]').hide(350,function(){$(this).remove;});
					
					var endorsement_form = templates['endorsement_form'];
					endorsement_form = $(endorsement_form).appendTo( 'div.endorsements_inner' );
					var form = endorsement_form.find('form');
					form.attr('action', form.attr('action').replace(/\d+/,team_id));

					endorsement_form.find('img.i36').attr('src', photo_url );
					
					activate_text_counters_grow(endorsement_form.find('textarea'), 120);

					endorsement_form.effect('highlight', {color: '#EAF8D0'},3000);	
				}
	

	%script#cta_template{:type=>'text/html'}
		:plain
			#{ render( partial: 'ideas/call_to_action', formats: [:html]  )}
				
				
	%script#create_cta_template
		:plain
			templates['call-to-action'] = $('<div></div>').html($.trim( $('script#cta_template').html() )).find('div.cta_block');
			template_functions['call-to-action'] = templates['call-to-action'].compile(
				{
					'@id' : 'id',
					'h1' : 'ctr', 
					'h2' : 'title',
					'p.link' : 'link'
				}
			);

	%script#idea_cta_help{:type=>'text/html'}
		:plain
			#{ render( template: 'help/idea_help', formats: [:html]  )}
				
				
	%script#create_idea_cta_help
		:plain
			templates['idea_cta_help'] = $('<div></div>').html($.trim( $('script#idea_cta_help').html() )).find('div#idea_help');


	%script#proposal_answer_template{:type=>'text/html'}
		:plain
			#{ render( partial: 'ideas/proposal_answer', locals: {theme: theme}, formats: [:html]  )}
				
				
	%script#create_proposal_answer_template
		:plain
			templates['proposal_answer'] = $('<div></div>').html($.trim( $('script#proposal_answer_template').html() )).find('li.theme');
			template_functions['proposal_answer'] = templates['proposal_answer'].compile(
				{
					'@id' : 'id',
					'div.answer' : 'answer_html'
				}
			);
			