- old_ts = Time.local(2020,1,1)
- newer_ts = Time.local(2025,1,1)

- question = Question.new member_id: 1, status: "ok", text: 'Question text', num_answers: 1000, anonymous: false, ver: 1, idea_criteria: "5..1000", answer_criteria: "5..1500", default_answer_id: nil, team_id: 1, order_id: 1
- question.created_at = old_ts
- question.updated_at = newer_ts
- question.id = 1

- theme = Idea.new text: 'theme text', role: 2, member_id: 1, team_id: 1, question_id: 1, parent_id: 1, order_id: 1, visible: true, version: 0
- theme.created_at = old_ts
- theme.updated_at = newer_ts
- theme.id = 1

- idea = Idea.new text: 'idea text', role: 1, member_id: 1, team_id: 1, question_id: 1, parent_id: 1, order_id: 1, visible: true, version: 1
- idea.created_at = old_ts
- idea.updated_at = newer_ts
- idea.id = 2

- question.themes = [theme]	
- question.themed_ideas = [idea]

- comment = Comment.new #(:created_at => old_ts, :updated_at => newer_ts)
- comment.created_at = old_ts
- comment.updated_at = newer_ts
- comment.anonymous = false
-	comment.publish = true
- comment.author = Member.find(1)
- comment.text = 'This is the comment text'
- comment.id = 0
- upload = Upload.new 
- upload.attachment_content_type = 'doc'
- upload.attachment_file_name = 'filename'
- comment.attachments = [upload]

%div#get_templates_scripts
	- if debug
		%h2 ideas/get_templates.html.haml
		= javascript_include_tag 'application_ce'
		= javascript_include_tag 'opt/pure.js'
		

	%script
		:plain
			templates_loaded = true;
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};
			
			function simple_format(s){
				var strs = unescape(s).split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				return s.replace(/\n/g,'<br/>')
			}

			function sanitize(s){
				return s.replace(/\s*(<p[^>]*>)\s*/ig,'$1').replace(/<\/p>/ig,'\n\n').replace(/<\/br\s*\/>/ig,'\n').replace(/<[^>]+>/gm,'');
			}

	- if debug
		%h3 ideas/theming_page
					
		= render( :partial => 'ideas/theming_page', locals: { debug: debug, question: question })
		= stylesheet_link_tag "ce/theming_page"


	%script#theme_page_template{:type=>'text/html'}
		:plain
			#{ render( :partial => 'ideas/theming_page', locals: { debug: debug, question: question })}
	
	%script#create_theme_page_template
		:plain
			templates['theme_page'] = $('<div></div>').html($.trim( $('script#theme_page_template').html() )).find('div:first');
			templates['new_theme_col'] = templates['theme_page'].find('div.theme_col.themes:first');
			template_functions['theme_col'] = templates['new_theme_col'].compile(
				{
					// directives go here
					'@id' : 'data.id',
					'li.theme_post_it div.post-it @id' : 'data.theme_id',
					'li.theme_post_it p.idea' : 'data.theme_text',
					'li.theme_post_it form @href' : '/idea/\#{data.theme_id}/edit_theme',
					'li.theme_post_it form @action' : '/idea/\#{data.theme_id}/edit_theme',
					'li.theme_post_it form @id' : 'data.theme_id',
					'li.idea_post_it div.post-it @id' : 'data.theme_idea_id',						
					'li.idea_post_it p.idea' : 'data.theme_idea'	
				}
			);
			
			realtime_data_update_functions['theme_col'] = 
				function(data){
					var new_theme_col = template_functions['theme_col']( data );
					if(data.side == 'left'){
						// insert after data.col_par
						new_theme_col = $(new_theme_col).insertBefore(data.col_par);
					}else{
						// insert after data.col_par
						new_theme_col = $(new_theme_col).insertAfter(data.col_par);
					}
					resize_theming_page();
					make_ideas_sortable(new_theme_col.find('ul.sortable_ideas'));
					make_ideas_sortable($('div.theming_page').find('div.new_group_drop_zone[id="' + new_theme_col.attr('id') + '"] ul.sortable_ideas'));
					
					// insert the new theme into the proposal page
					return new_theme_col;
				}
			
			// realtime_data_update_functions['theme_col']( { data: { id: 123, theme_idea: 'This is my new theme'},   });	

	- if debug
		%h3 ideas/_comment
		= render( :partial => 'ideas/comment', locals: { debug: debug, comment: comment })

	%script#comment_template{:type=>'text/html'}
		:plain
			#{ render( :partial => 'ideas/comment', locals: { debug: debug, comment: comment })}

	%script#create_comment_template
		:plain
			templates['comment'] = $('<div></div>').html($.trim( $('script#comment_template').html() )).find('div:first');
			template_functions['comment'] = templates['comment'].compile(
				{
					'p.text' : function(arg){ return simple_format(arg.context.data.comment.comment.text)},
					'p.name' : '\#{data.author.member.first_name} \#{data.author.member.last_name}',
					'p.timeago @title' : 'data.comment.comment.created_at',
					'img.i36 @src' : 'data.photo_url'
				}
			);
			
			// template_functions['comment']( com )
			
			realtime_data_update_functions['comment'] = 
				function(data){
					var new_comment = template_functions['comment']( data );
					var form = $('form.add_comment[id="' + com.data.comment.comment.parent_id + '"]')
					new_comment = $(new_comment).prependTo( form.siblings('div.activity_stream') );
					new_comment.find('p.timeago').timeago();
					form.val('').focus();

					if( data.data.attachments && data.data.attachments.length > 0){
						var attachment_original = new_comment.find('div.attachment').remove();
						$.each( data.data.attachments, 
							function(index,data){
								var attachment = attachment_original.clone();
								var att_data = data.upload;
								attachment.find('a').attr('href', att_data.url);
								attachment.find('img').attr('src',att_data.icon);
								attachment.find('p').html(att_data.attachment_file_name);
								new_comment.find('div.attachments p.clear').before(attachment);
							}
						);
					}else{
						new_comment.find('div.attachments').remove();
					}
					
					new_comment.effect('highlight', {color: '#EAF8D0'},3000);				
					setTimeout(function(){ 
						var new_comment = $(this);   
						//if(!new_comment.isOnScreen())
						var par = new_comment.closest('div.idea_details.popup');
						if(par.size() == 0){
							par = $('html body');
						}
						var new_scroll_pos = par.scrollTop() + new_comment.height() + 40;
						par.animate({scrollTop: new_scroll_pos }, 800);
					}.bind(new_comment),100
					);
					
					return new_comment;
				}
