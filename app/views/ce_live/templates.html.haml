- old_ts = Time.local(2020,1,1)
- newer_ts = Time.local(2025,1,1)

- idea = LiveTalkingPoint.new text: 'idea text', group_id: 111, pos_votes: 4, neg_votes: 1
- idea.created_at = old_ts
- idea.updated_at = newer_ts
- idea.id = 2

- theme = LiveTheme.new text: 'theme text', visible: true
- theme.created_at = old_ts
- theme.updated_at = newer_ts
- theme.id = 1
- theme.talking_points = [idea]

- macro_theme = LiveTheme.new text: 'theme text', visible: true
- macro_theme.created_at = old_ts
- macro_theme.updated_at = newer_ts
- macro_theme.id = 1
- macro_theme.themes = [ theme ]

- presenter = OpenStruct.new
- presenter.live_themes = [ theme ]
- presenter.unthemed_ideas = [ idea ]
- presenter.parked_ideas = []
- presenter.my_themes = [ macro_theme ]



%div#get_templates_scripts
	- if debug
		%h2 ce_live/get_templates.html.haml
		= javascript_include_tag 'application_ce'
		= javascript_include_tag 'opt/pure.js'
		

	%script
		:plain
			templates_loaded = true;
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};

	- # build the templates for the micro theming page
	- if debug
		%h3 ce_live/theming_page
				
		= render( :partial => 'live_themes/post_its_wall', locals: { presenter: presenter, debug: debug })
		= stylesheet_link_tag "ce/theming_page"


	%script#theme_page_template{:type=>'text/html'}
		:plain
			#{ render( :partial => 'live_themes/post_its_wall', locals: { presenter: presenter, debug: debug })}

	%script#create_theme_page_template
		:plain
			templates['theme_page'] = $('<div></div>').html($.trim( $('script#theme_page_template').html() )).find('div:first');
			templates['new_theme_col'] = templates['theme_page'].find('div.theme_col.themes[id="1"]');
			template_functions['new_theme_col'] = templates['new_theme_col'].compile(
				{
					// directives go here
					'@id' : 'data.id',
					'li.theme_post_it div.post-it @id' : 'data.theme_id',
					'li.theme_post_it p' : 'data.theme_text',
					'li.idea_post_it div.post-it @id' : 'data.theme_idea_id',						
					'li.idea_post_it p.idea' : 'data.theme_idea',
					'li.idea_post_it div.post-it @table_id' : 'data.theme_idea_group_id',
					'li.idea_post_it div.post-it span.table_id' : 'data.theme_idea_group_id'	
				}
			);
		
			realtime_data_update_functions['live_new_theme'] = 
				function(data){
					// it depends on whether this is the macro page or the micro page
					if( page_data.type == "macro theming" ){
						console.log("do something with live new theme for macro-theming page");
						if(data.data.version == 0) { return; }
						// show new live_theme as a post-it in the new ideas column, if not version == 0
						var micro_theme_post_it = template_functions['micro_theme_post-it']( data );
						//$('div#unthemed_ideas ul.sortable_ideas').append(micro_theme_post_it);
						micro_theme_post_it = $(micro_theme_post_it)
						micro_theme_post_it.find('div.post-it').addClass('micro');
						
						if( data.data.examples.length > 0 ){
							var ex_div = micro_theme_post_it.find('div.examples');
							ex_div.append( '<p class="count">' + data.data.examples.length + ' example' + ( data.data.examples.length > 1 ? 's' : '') + '</p>');
							for( var i=0, ex; (ex=data.data.examples[i]); i++){
								ex_div.append( '<div class="example">' + ex['text'] + ' (' + ex['group_id'] + ')</p>');
							}
						}

						if( $('div.post-it[id="' + data.data.id + '"]').size() == 0){
							$('div#unthemed_ideas ul.sortable_ideas').append( micro_theme_post_it );
						}else{
							$('div.post-it[id="' + data.data.id + '"]').closest('li').replaceWith(micro_theme_post_it);
						}
						
						var post_it = micro_theme_post_it.find('div.post-it');
						post_it.find('span.warn').remove();
						post_it.prepend(' <span class="warn delete">Updated</span>');
						
						
					} else if ( page_data.type == "micro theming" ){
						var new_theme_col = template_functions['new_theme_col']( data );
						// insert after placeholder
						new_theme_col = $(new_theme_col).insertAfter( $('div#placeholder.theme_col'));

						resize_theming_page();
						make_ideas_sortable(new_theme_col.find('ul.sortable_ideas'));
					}
				}

				templates['post-it'] = templates['new_theme_col'].find('li.idea_post_it');
				template_functions['post-it'] = templates['post-it'].compile(
					{
						// directives go here
						'@id' : 'data.live_talking_point.id',
						'p.idea' : 'data.live_talking_point.text',
						'div.post-it @id' : 'data.live_talking_point.id',
						'div.post-it @table_id' : 'data.live_talking_point.group_id',
						'div.post-it span.table_id' : 'data.live_talking_point.group_id',
						'div.post-it span.pos' : '+\#{data.live_talking_point.pos_votes}',
						'div.post-it span.neg' : '-\#{data.live_talking_point.neg_votes}'
					}
				);

				realtime_data_update_functions['live_talking_point'] = 
					function(data){
						if( data.data.live_talking_point.tag == page_data.output_tag){
							console.log("processing live_talking_point, add to new talking points, ignore type: " + data.data.live_talking_point.tag);
							var post_it = template_functions['post-it']( data );
							$('div#unthemed_ideas ul.sortable_ideas').append(post_it);
							//make_ideas_sortable(new_theme_col.find('ul.sortable_ideas'));
						}else{
							console.log("processing live_talking_point, ignore type: " + data.data.live_talking_point.tag);
						}
					}
					
	-# build the templates for the macro theming page
	%script#macro_theme_page_template{:type=>'text/html'}
		- presenter.unthemed_ideas = presenter.live_themes
		:plain
			#{ render( :partial => 'live_themes/post_its_wall_macro', locals: { presenter: presenter, debug: debug })}

	%script#create_macro_theme_page_template
		:plain
			templates['macro_theme_page'] = $('<div></div>').html($.trim( $('script#macro_theme_page_template').html() )).find('div:first');
			templates['new_macro_theme_col'] = templates['macro_theme_page'].find('div.theme_col.themes[id="1"]');
			template_functions['new_macro_theme_col'] = templates['new_macro_theme_col'].compile(
				{
					// directives go here
					'@id' : 'data.id',
					'li.theme_post_it div.post-it @id' : 'data.theme_id',
					'li.theme_post_it p' : 'data.theme_text',
					'li.idea_post_it div.post-it @id' : 'data.theme_idea_id',						
					'li.idea_post_it div.inner div.idea_text' : 'data.theme_idea'
				}
			);

			realtime_data_update_functions['live_new_macro_theme'] = 
				function(data){
					var new_theme_col = template_functions['new_macro_theme_col']( data );
					// insert after placeholder
					new_theme_col = $(new_theme_col).insertAfter( $('div#placeholder.theme_col'));
					new_theme_col.find('li.theme_post_it div.post-it').removeClass('micro').addClass('macro');

					var seed_micro_idea = $('li.idea_post_it.for_new_group');
					new_theme_col.find('li.idea_post_it div.examples').replaceWith(seed_micro_idea.find('div.examples'));
					seed_micro_idea.remove();
					
					resize_theming_page();
					make_ideas_sortable(new_theme_col.find('ul.sortable_ideas'));

					return new_theme_col;
				}

			templates['macro-post-it'] = templates['new_macro_theme_col'].find('li.idea_post_it');
			template_functions['macro-post-it'] = templates['macro-post-it'].compile(
				{
					// directives go here
					'@id' : 'data.live_talking_point.id',
					'div.inner div.idea_text' : 'data.live_talking_point.text'
				}
			);

			template_functions['micro_theme_post-it'] = templates['macro-post-it'].compile(
				{
					// directives go here
					'div.post-it @id' : 'data.id',
					'div.inner div.idea_text' : 'data.theme_text'
				}
			);
			
			realtime_data_update_functions['live_uTheme_delete'] =
				function(data){
					if(page_data.type != "macro theming") return;
					//console.log("Update the themes examples");
					var microtheme = $('div.post-it[id="' + data.data.live_theme_id + '"]');
					
					microtheme.find('span.warn').remove();
					microtheme.prepend(' <span class="warn delete">[This microtheme has been deleted by Themer]</span>');
					var col_id = microtheme.closest('div.theme_col').attr('id');
					if(col_id == 'unthemed_ideas' || col_id == 'parked_ideas'){
						// fade and delete
						microtheme.closest('li').hide(2000, function(){$(this).remove();});
					}else{
						//it is has been themed, mark it as deleted
						microtheme.closest('li').addClass('deleted').fadeTo(2000,.4);
						 
					}
					setTimeout(post_theme_changes.update_fn,1200);
				}		
			
		

