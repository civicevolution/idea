- content_for(:script) do
	%style
		:sass
			textarea.theme
				width: 600px
				height: 60px
			textarea.example
				width: 600px
				height: 60px
				margin-bottom: 30px
			body
				padding-bottom: 40px
			p.lbl_theme
				margin: 0
			p.lbl_example
				margin: 6px 0 0 0 
				
			p.theme
				font-size: 1.2em
				margin: 0
				width: 600px
				
			p.example
				font-style: italic
				color: blue
				margin: 6px 0 16px 0
				width: 600px
			div.controls
				width: 60px
				text-align: center
				font-size: 1.6em
			ul.themes
				list-style: none
				li
					min-height: 60px
					div
						float: left
			p.clear_both
				clear: both
			form.theme_edit, li.theme.model
				display: none
			div.controls
				position: relative
				div.edit
					background: url('/images/pencil.gif') no-repeat top right 
					position: absolute
					top: 30px
					left: 26px
					cursor: pointer
					width: 20px
					height: 16px
					
			div.visibility
				height: 12px
				width: 20px
				position: absolute
				top: 32px
				left: 10px
				background: url(/images/visible3.gif) no-repeat 0 -12px
				cursor: pointer
			li.visible
				div.visibility
					background-position: 0 0
			
				
	:javascript
		var pub_sub_channels = #{@channels}
		var live_session_id = #{params[:session_id]}
		var disable_editing = #{@disable_editing}
		var published = #{@session.published}
		
		if(!disable_editing){
			$('ul.themes').sortable({
				stop: function(event,ui){
					//console.log("update the theme sort order");
					var ul = ui.item.closest('ul');
					var new_ids = [];
					var ltr_ctr = 1;
				 	ul.find('li').each( function(){
						var li = $(this);
						new_ids.push( li.attr('theme_id'));
						li.find('div.controls span.ltr').html( int_to_letters( ltr_ctr++ )  );
					});
					// compare if the order has changed
					console.log("old order: " + ul.attr('id_order') + " new order: " + new_ids.join(','));
					if( ul.attr('id_order') != new_ids.join(',') ){
						console.log("update the theme sortto: " + new_ids.join(','));
						post_theme_changes({act: 'update_final_theme_order', new_ids: new_ids });
						show_saving_modal();
					}
				
				}
			});
		}
		function show_saving_modal(){
			var dialog = $('<p class="saving_modal">Please wait a moment</p>').dialog( {title : 'Saving...', modal : true, width : '200px', closeOnEscape: true, close: function(){$(this).remove()} });
		}
		function int_to_letters(val){
		  var str = '';
		  var val_floor = Math.floor(val/26);
		  var mod = ind = val%26;
		  if(mod == 0){
		    --val_floor;
		    mod = 26;
		  }
		  if(val_floor>0){
		    str += String.fromCharCode('A'.charCodeAt() + val_floor - 1);
		  }

		  str += String.fromCharCode('A'.charCodeAt() + mod - 1);
		  return str;
		}
		
		function update_new_theme( act, form_id, theme_json ){
			temp.theme_json = theme_json
			if(act == 'insert'){
				console.log("add_new_theme with text: " + theme_json.live_theme.text);
				var li = $('li.theme.model').clone();
				li.removeClass('model');
				li.attr('theme_id',theme_json.live_theme.id);
				li.find('p.theme').html(theme_json.live_theme.text);
				li.find('p.example').html(theme_json.live_theme.example_ids);
				var ul = $('ul.themes');
				li.find('span.ltr').html( int_to_letters( ul.find('li').size() + 1 ) );
				ul.append(li)
			}else{
				console.log("update_theme with text: " + theme_json.live_theme.text);
				var li = $('li[theme_id="' + theme_json.live_theme.id + '"]');
				li.find('p.theme').html(theme_json.live_theme.text);
				li.find('p.example').html(theme_json.live_theme.example_ids);
			}
			$('input[name="form_id"][value="' + form_id + '"]').closest('div.ui-dialog').dialog('destroy').remove();
		}
		var form_ctr = 1
		$('a.add_edit_theme').die('click').live('click',
			function(){
				if(editing_disabled())return;
				//console.log("Add a theme");
				var form = $('form.theme_edit').clone();
				form.show();
				form.find('input[name="form_id"]').val( form_ctr++ );
				form.find('input[name="theme_id"]').val( null );
				form.find('textarea[name="theme"]').val( '');
				form.find('textarea[name="example"]').val('');
				var dialog = form.dialog( {title : 'Add a new theme and example', modal : true, width : '600px', closeOnEscape: false, close: function(){$(this).remove()} });
				return false;
			}
		);
		
		$('div.edit').die('click').live('click',
		  function(){
				if(editing_disabled())return;
		    //console.log("edit the theme/example");
				var li = $(this).closest('li');
				var theme_id = li.attr('theme_id');
				var form = $('form.theme_edit').clone();
				form.show();
				form.find('input[name="form_id"]').val( form_ctr++ );
				form.find('input[name="theme_id"]').val( theme_id );
				form.find('textarea[name="theme"]').val( li.find('p.theme').html() );
				form.find('textarea[name="example"]').val( li.find('p.example').html() );
				var dialog = form.dialog( {title : 'Edit this theme and example', modal : true, width : '600px', closeOnEscape: false, close: function(){$(this).remove()} });
				return false;
			}
		);
		
		$('div.visibility').die('click').live('click',
			function(){
				//console.log("adjust visibility");
				if(editing_disabled())return false;
				var li = $(this).closest('li');
				if(li.hasClass('visible')){
					li.removeClass('visible');
					var visible = false;
				}else{
					li.addClass('visible');
					var visible = true;
				}
				post_theme_changes({act: 'update_theme_visibility', theme_id: li.attr('theme_id'), visible: visible });
			}
		);
		$('form a.cancel').die('click').live('click',
			function(){
				$(this).closest('div.ui-dialog').dialog('destroy').remove();
				return false;
			}
		);
		
		
		
		
		
%div#live_theme_final_edit

	- theme_letter = 'A'
	%ul.themes{:id_order=> @my_themes.map(&:id).join(',') }
		- @my_themes.each do |theme|
			%li.theme{:theme_id=>theme.id, :class => theme.visible ? 'visible' : ''}
				%div.controls
					%span.ltr= theme_letter
					%div.edit
					%div.visibility
				- theme_letter.succ!
				%div.theme
					%p.theme= theme.text
					%p.example= theme.example_ids
				%p.clear_both
	= link_to 'Add a theme', {}, {:class=>'add_edit_theme'}
	
	= form_tag(post_live_theme_path, :remote=>true, :class=>'std_form orig theme_edit', :id=>1) do
		= hidden_field_tag :live_session_id, params[:session_id]
		= hidden_field_tag :form_id 
		= hidden_field_tag :theme_id 
		= hidden_field_tag :act, 'update_theme_text_and_example'
		%label{:for=>'theme'} Theme
		= text_area_tag :theme, nil, {:class=>'autosize'}
		%label{:for=>'example'} Example
		= text_area_tag :example, nil, {:class=>'autosize'}
		%button{'data-disable-with' =>'Submitting...'}
			Save
		= link_to 'Cancel', {}, {:class=>'cancel'}
	
	%li.theme.model
		%div.controls
			%span.ltr
			%div.edit
			%div.visibility
		%div.theme
			%p.theme
			%p.example
		%p.clear_both
	