%div#get_templates_scripts
	%script
		:plain
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};
			
			function simple_format(s){
				var strs = unescape(s).split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				return s.replace(/\n/g,'<br/>')
			}
			function simple_com_format(context){
				var s = unescape(context.data.comment.text);
				var strs = s.split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				s = s.replace(/\n/g,'<br/>')

				var author = '<a href="/members/' + context.ape_code + '/profile" class="com_author" data-remote="true">' + unescape(context.author.first_name + ' ' + context.author.last_name) + '</a>'

			  s = s.replace(/<p>/,'<p>' + author + ' ')
				//console.log("simple_com_format s: " + s)
				return s;
			}
			
			function reformat_comment_quote(com){
				var txt = com.find('div.comment_text').html();
				if(!txt.match(/\[quote=/)) return;
				var pcs = txt.match(/^(.*)\[quote="([^"]*)"\]([\s\S]*)\[\/quote\]([\s\S]*)$/);
				var author = pcs[1] + '</p>';
				var quote = '<div class="quote corner"><p class="quote">' + pcs[2] + ' said:</p><p>' + pcs[3] + '</p></div>	'
				pcs[4] = pcs[4].replace(/\n/,'').replace(/<br\/*>/gi,'\n').replace(/^\s*/,'').replace(/\n/g,'<br/>');
				var com_body = '<p>' + pcs[4];
				com.find('div.comment_text').html( author + quote + com_body);
			}
		  

	%script#comment_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/comment.html', :object => @comment)}
		
	%script#create_comment_template
		:plain
			templates['comment'] = $('<div></div>').html($.trim( $('script#comment_template').html() )).find('div:first');
			template_functions['comment'] = templates['comment'].compile(
				{
					'div.Comment_entry @id' : 'com_\#{data.comment.id}',	
					'img.i36 @src' : 'author.photo_url',
					'div.comment_text' : function(arg){return simple_com_format(arg.context)},
					'a.reply @href' : function(arg){
						if(arg.context.data.comment.parent_type == 1){
							 return '/comments/' + arg.context.data.comment.id + '/comments'
						}else{
							return '/comments/' + arg.context.data.comment.id + '/reply'
						}
					},
					'a.reply @id' : 'data.comment.id',	
					'a.report @href' : '/comments/\#{data.comment.id}/report',
					'@id' : 'data.comment.id',
					'abbr.timeago @title' : 'data.comment.created_at'
				}
			);
			realtime_data_update_functions['Comment'] =
				function(data){
					//console.log("insert a comment v7");
					// testing mode, change the id of the existing element in the page
					//$('div.Comment[id="' + data.data.comment.id + '"]').attr('id', '123123');
					
					com = template_functions['comment'](data);

					var old_com = $('div.Comment[id="' + data.data.comment.id + '"]');
					if(old_com.size()>0){
						// replace the text only
						//console.log("replace the text only");
					  old_com.find('div.comment_text').replaceWith( $(com).find('div.comment_text'));
						reformat_comment_quote(old_com);
					}else{
						switch(Number(data.data.comment.parent_type)){
							case 1:
								var par_div = $('div.ques_discussion');
								if(par_div.size()>0){
									com = $(com).appendTo(par_div);
								}
								break
							case 3:
								var par_div = $('div.comment_comments[id="' + data.data.comment.parent_id + '"]');
								if(par_div.size()>0){
									var form = par_div.find('form.orig');
									if(form.size()>0){
										com = $(com).insertBefore(form);
									}else{
										com = $(com).appendTo(par_div);
									}
									reformat_comment_quote(com);
								}
							
								break
							case 13:
								var par_div = $('div.talking_point_comments[id="' + data.data.comment.parent_id + '"]');
								if(par_div.size()>0){
									var form = par_div.find('form.orig');
									if(form.size()>0){
										com = $(com).insertBefore(form);
									}else{
										com = $(com).appendTo(par_div);
									}
									reformat_comment_quote(com);
								}
								break
						}
						try{ // com doesn't always exist, if not inserted
							com.find('abbr').timeago();
						}catch(e){}
					}
				}
			//console.log("Comment template is ready");



	%script#talking_point_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/talking_point.html', :object => @talking_point)}

	%script#create_talking_point_template
		:plain
			templates['TalkingPoint'] = $('<div></div>').html($.trim( $('script#talking_point_template').html() )).find('div:first');
			template_functions['TalkingPoint'] = templates['TalkingPoint'].compile(
				{
					'@id' : 'data.talking_point.id',
					'p.talking_point' : 'data.talking_point.text',
					'a.tp_show_coms@href' : '/talking_points/\#{data.talking_point.id}/comments',
					'a.edit@href' : '/talking_points/\#{data.talking_point.id}/edit'
				}
			);
			realtime_data_update_functions['TalkingPoint'] =
				function(data){
					//console.log("insert a TalkingPoint v2 with id: " + data.data.talking_point.id);
					temp.tp_data = data;

					tp = template_functions['TalkingPoint'](data);
					temp.tp_str = tp;
					
					var par_div = $('div.talking_points_list[id="' + data.data.talking_point.question_id + '"]');
					if(par_div.size()>0){
						// testing mode, change the id of the existing element in the page
						//par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]').attr('id', '123123')
						// testing mode, remove the original element so it won't be duplicated
						//par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]').remove();
						
						var old_tp = par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]');
						if(old_tp.size()>0){
							// replace the text only
							//console.log("replace the text only");
						  old_tp.find('p.talking_point').html(data.data.talking_point.text);
							// update the versions link
							temp.old_tp = old_tp
							old_tp.find('a.versions').removeClass('hide').html( 'v' + data.data.talking_point.version);
						}else{
							//console.log("insert a new TP")
							// insert a new tp
							tp = $(tp).insertBefore( par_div.find('p.new_tp_insert_point') );
							temp.tp = tp;
							tp.find('div.my_rating').addClass('js') // arrange for compressed javascript enabled format
							tp.find('div.community_rating').removeClass('no_js');
							// fix the rating @id and @name
							var id = data.data.talking_point.id;
							tp.find(':radio').each(
								function(){
									var el = $(this);
									var val = el.val();
									el.attr('id','tp_rating_' + id + '_' + val);
									el.attr('name','tp_rating_' + id);
									el.parent().find('label').attr('for','tp_rating_' + id + '_' + val);
								}
							)
							var cb = tp.find(':checkbox');
							cb.attr('id','preference_' + id );
							cb.attr('name','preference_' + id);
							cb.parent().attr('for','preference_' + id );
							
						}
					}
				}

			//console.log("TalkingPoint template is ready");
			
			realtime_data_update_functions['TalkingPointPreference'] =
				function(data){
					//console.log("insert a TalkingPointPreference v1 with id: " + data.data.id) ;
					$('div.talking_point_entry[id="' + data.data.id + '"] span.fav_cnt').html(data.data.count);
				}	
			//console.log("TalkingPointPreference function is ready")


			realtime_data_update_functions['TalkingPointAcceptableRating'] =
				function(data){
					//console.log("insert a TalkingPointAcceptableRating v2 with id: " + data.data.id);
					
					var vote_max = 0
					var num_votes = 0
					$.each(data.data.votes, 
						function(){
							vote = Number(this);
							num_votes += vote;
							if(vote > vote_max) vote_max = vote;
						}
					);
					//console.log("vote_max: " + vote_max + " num_votes: " + num_votes);
					var graph = $('div.talking_point_entry[id="' + data.data.id + '"] div.graph.js')
					//console.log("graph.height(): " + graph.height());
					// forcefully reset the height for IE7
					graph.height( graph.height() )
					$('div.talking_point_entry[id="' + data.data.id + '"] div.graph.js div').not('.zero').each(
						function(i,el){
							//console.log("height: data.data.votes[i]/vote_max * 100 + '%' " + data.data.votes[i]/vote_max * 100 + '%')
							$(el).height(data.data.votes[i]/vote_max * 100 + '%')
						}
					);
					
					$('div.talking_point_entry[id="' + data.data.id + '"] p.talking_point_ratings').html(num_votes + (num_votes == 1 ? ' rating' : ' ratings'));
				}
				
			//console.log("TalkingPointAcceptableRating function is ready")

	%script#curated_talking_points_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/curated_talking_points2.html')}
		
	%script#create_curated_talking_points_template
		:plain
			templates['curated_talking_points'] = $('<div></div>').html($.trim( $('script#curated_talking_points_template').html() )).find('div:first');
			template_functions['curated_talking_points'] = templates['curated_talking_points'].compile(
				{
					'@id' : 'id'
					//'p.question' : 'question',
					//'div.header a@id' : 'id',
					//'div.header a@href' : 'close_href',
					//'div.curated@class+' : 'hide.curated',
					//'div.non_curated@class+' : 'hide.non_curated',				
					//'div.curator@class+' : 'hide.curator'
				}
			);
			
			function open_question_worksheet(el){
				el = $(el);
				var question_id = el.closest('div.question_summary').attr('id');
				var order_id = Number(el.html().match(/Q(\d+)/)[1]); 
				var question_text = el.html().replace(/Q\d+: /,'');
				
				$.scrollTo($('div.question_summary[id="' + question_id + '"] p.question'), 600)
				return false;
				
				//if ( !$('h3#curated_list_t').attr('class').match(/active/) ) $('h3#curated_list_t').click();
				
				var q_tabs = $('div.list_tabs');
				
				var get_tab = true;
				while(get_tab){
					q_tabs.tabs("add", '#curated_list_' + order_id, 'Q' + order_id);
					new_tab_close = q_tabs.find('a.close_worksheet:last');
					if(new_tab_close.size() > 0 ) get_tab = false;
				}				
				new_tab_close.attr('id',question_id);
				new_tab_close.attr('href',new_tab_close.attr('href').replace(/\d+/,question_id));
				q_tabs.tabs('select','#curated_list_' + order_id);
				
				$('div#curated_list_' + order_id).addClass('tab_content selected_tp_list');
				
				//move the new tab to the correct position if there is more than one tab
				if(q_tabs.find('a.q_tab').size()>1){
					insert_index = 0;
					q_tabs.find('a.q_tab').each(function(){
						var a = $(this);
						var id = Number(a.html().match(/(\d+)/)[1]);
						if(order_id > id) ++insert_index;
						//console.log("html: " + a.html() + ", id: " + id );
					});
					
					// don't swap the tabs if they are the same
					if (q_tabs.find('ul.list_tabs li').eq(insert_index).find('a.q_tab').html() != 
						q_tabs.find('ul.list_tabs li:last').find('a.q_tab').html() ){
							q_tabs.find('ul.list_tabs li').eq(insert_index).before(q_tabs.find('ul.list_tabs li:last'))
						}
				}
				update_right_panel_context('worksheet');

				var tp_sec = el.closest('div.question_summary').find('div.talking_points_list');
				var ul = el.closest('div.question_summary').find('ul.talking_points');
				
				var curated_tps_exist = ul.attr('curated_tp_ids') && ul.attr('curated_tp_ids') != ''

				var data = {
					question: el.html(),
					id: question_id, 
					//close_href: templates['curated_talking_points'].find('a.close_worksheet').attr('href').replace(/\d+/,question_id),
					hide:{ 
						curated: !am_curator && curated_tps_exist && ul.attr('auto_curated') == 'f' ? '' : ' hide',
						non_curated: !am_curator && curated_tps_exist && ul.attr('auto_curated') == 't' ? '' : ' hide',
						curator: am_curator && curated_tps_exist ? '' : ' hide'
					}
				}
				
				if(!curated_tps_exist) data.hide.non_curator_instr = ' hide'

				var ul_offset = ul.offset();
				
				var list_div = $(template_functions['curated_talking_points'](data)).appendTo('body');
				
				// only replace UL with a curated list
				if( curated_tps_exist ){
					list_div.find('ul.talking_points').replaceWith(ul.clone());
				}else{
					list_div.find('ul.talking_points').attr('id',question_id);
				}
				
				list_div.find('ul div').remove();
				list_div.addClass('selected_tp_list corner')

				list_div.css({top: ul_offset.top, left: ul_offset.left, width: ul.width()});

				$('<div class="msg"><h2>...loading the talking points worksheet</h2></div>').insertAfter(tp_sec);
				tp_sec.hide(1000);

				var new_left = $('div.right_side').position().left;
				var new_top = $('div.list_tabs').position().top + $(window).scrollTop() + 31;
				
				//console.log("XXX 1: " + list_header.position().top + ", 2: " + list_header.outerHeight() + ", 3: " + $('body').scrollTop() )
				//console.log("new_top: " + new_top + ", new_left: " + new_left)

				//list_div.animate({width: '300px', 'font-size': '.9em'},1000,
				list_div.animate({top: new_top + 'px', left: new_left + 'px', width: '300px', 'font-size': '.9em'},600,
					function(){
						//$(this).css( {position: 'fixed', top: '4px'});
						//$('div.curated_list div#tab_curated_q1').append(list_div.find('ul'));
						
						$('div#curated_list_' + order_id).html('<p>' + question_text + '</p>').append(list_div.find('ul') );
						list_div.remove();
						set_inner_tab_content_height();
						// scroll to top of question
						$.scrollTo($('div.question_summary[id="' + question_id + '"] p.question'), 600)
					}
				);

				init_currated_list(question_id);
				return false;
			}

			
			function close_question_worksheet(el){
				el = $(el);
				temp.el = el;
				
				if(el.attr('id')){ 
					// close comes from out of worksheet like curated list
					el = $('div.question_summary[id="' + el.attr('id') + '"] a.close_worksheet');
				}
				var worksheet = el.closest('div.worksheet');
				var question_id = worksheet.attr('id');
				worksheet.slideUp(800, function(){$(this).remove();});
				
				return false;
				
				// scroll to top of question
				$.scrollTo(el.closest('div.question_summary'),1000);
				
				
				
				var q = worksheet.closest('div.question_summary').children('p.question');
				var new_top = q.offset().top + q.height();
				var new_left = q.offset().left;

				var div_list = $('ul.talking_points[id="' + question_id + '"]').closest('div.ui-tabs-panel');
				
				div_list.find('p	').remove();
				var offset = div_list.offset();
				var width = div_list.width();
				
				
				var q_tabs = $('div.list_tabs ul.list_tabs');
				var tab = q_tabs.find('a.close_worksheet[id="' + question_id +'"]').closest('li');

				// get the next tab
					var next_tab = tab.prev('li');
					if(next_tab.size() == 0)next_tab = tab.next('li');
				// remove this tab
				tab.remove();

				if(next_tab.size() == 0){
					// if no more tabs, close this accordion panel and hide the accordion tab
					update_right_panel_context('proposal')
				}else{
					// get the index to the next_tab
					var index = 0;
					q_tabs.find('ul.list_tabs li').each(
						function(){
							if($(this).find('a:first').html() == next_tab.find('a:first').html()){
								return;
							}else{
								++index;
							}
						}
					);
					q_tabs.tabs('select',index);
				
				}
				// put up the verify message
				ul = div_list.find('ul');
				msg = $('<div class="msg"><p>Verifying current talking points</p></div>').appendTo(ul);
				msg.fadeTo(500,.7);
				
				// slide the list back to the summary
								
				div_list.remove();
				div_list.attr('id',question_id);
				div_list.addClass('selected_tp_list')
				$('body').append(div_list);
				div_list.css(offset);
				div_list.css({position: 'absolute', width: width});
				
				div_list.animate({top: new_top+'px', left: new_left + 'px', width: q.width() + 'px', 'font-size': '1.2em'},1000, 
					function(){
						$(this).find('p:first').remove();
					}
				);
			}
			
			
			function init_currated_list(question_id){
				if( !am_curator ) return;
				console.log("init_currated_list for " + question_id);
				$('div.selected_tp_list ul[id="' + question_id + '"] li.talking_point img').die('click').live('click',
					function(){
						$(this).closest('li').slideUp(800,
							function(){ 
								var ul = $(this).closest('ul');
								$(this).remove();
								update_curated_tp_ids( ul )
							}
						);
					}
				);

				$('div.selected_tp_list ul[id="' + question_id + '"]').sortable(
					{
						start: function(event,ui){
							$(this).find('img').removeClass('show');
						},
						stop: function(event,ui){
							if( !ui.item[0].nodeName.match(/li/i) ){
								var li = $('<li class="talking_point" id="' + ui.item.attr('tp_id') + '">' + ui.item.html() + 
									'<img src="/images/delete_icon_16.gif" title="Click to delete"></li>')
								ui.item.replaceWith(li);
								if( li.parent().find('li[id="' + li.attr('id') + '"]').size() > 1 ){
									li.html('<h3>Duplicate!</h3>');
									li.fadeOut(1400,function(){$(this).remove()})
								}
							}else{
								var li = ui.item;
							}
							li.parent().find('li.talking_point[id="0"]').remove();
							update_curated_tp_ids( $(this) );
						},
						cursor: 'pointer',
						placeholder: 'curated_list_placeholder'
					}
				);
				
				$('div.selected_tp_list ul[id="' + question_id + '"] a.tp_details').die('click').live('click',
					function(){
						try{
							var id = $(this).closest('li').attr('id')
							//console.log("show details for li: " + id);
							var tp = $('div.worksheet div.talking_point_entry[id="' + id + '"]');
							temp.tp = tp;
							if(!tp.is(':visible')){
								if(!tp.prev('div.talking_point_entry').is(':visible')){
									tp.before('<h2 class="ellipsis">&hellip;</h2>')
								}
								tp.show();
							}
							$.scrollTo( tp,500);	
						}catch(e){}
						return false;
					}
				);
				
				
				function update_curated_tp_ids($ul){
					var question_id = $ul.attr('id');
					var curated_ids = $ul.attr('curated_tp_ids')
					var new_ids = $ul.sortable('toArray').toString();
					if(curated_ids == new_ids){
						//console.log("Curated_tp_ids hasn't changed, do not send");
					}else{
						//console.log("Send these ids to the server: " + new_ids + " for question_id: " + question_id);
						$.post('/questions/' + question_id + '/curate_tps', {tp_ids: new_ids}, 
							function(){
								$('div.selected_tp_list[id="' + question_id + '"] ul.talking_points').attr('curated_tp_ids',new_ids);
							}, 
							"script"
						);
					}
					$ul.sortable('refresh');
					tp_delete_hover( question_id );
				}

				function tp_delete_hover(question_id){
					//console.log("tp_delete_hover for id: " + question_id)
					$('div.selected_tp_list[id="' + question_id + '"] li.talking_point').hover(
						function(){
							$(this).find('img').addClass('show');
							//console.log("show trash can");
						},
						function(){
							//console.log("hide trash can");
							$(this).find('img').removeClass('show');
						}
					);
				}

				tp_delete_hover(question_id);
				
				var list = $('div.selected_tp_list[id="' + question_id + '"]')
				setTimeout(function(){this.find('div.curator').find('h4,ul').hide(2000)}.bind(list),5000);
			
				setTimeout(set_inner_tab_content_height,600);
			}
			
			//console.log("Curated_talking_points template is ready");
