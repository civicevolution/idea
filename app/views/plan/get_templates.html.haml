%div#get_templates_scripts
	%script
		:plain
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};
			
			function simple_format(s){
				var strs = unescape(s).split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				return s.replace(/\n/g,'<br/>')
			}
			function simple_com_format(context){
				var s = unescape(context.data.comment.text);
				var strs = s.split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				s = s.replace(/\n/g,'<br/>')

				var author = '<a href="/members/' + context.ape_code + '/profile" class="com_author" data-remote="true">' + unescape(context.author.first_name + ' ' + context.author.last_name) + '</a>'

			  s = s.replace(/<p>/,'<p>' + author + ' ')
				//console.log("simple_com_format s: " + s)
				return s;
			}
			
	%script#comment_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/comment.html', :object => @comment)}
		
	%script#create_comment_template
		:plain
			templates['comment'] = $('<div></div>').html($.trim( $('script#comment_template').html() )).find('div:first');
			template_functions['comment'] = templates['comment'].compile(
				{
					'div.Comment_entry @id' : 'com_\#{data.comment.id}',	
					'img.i36 @src' : 'author.photo_url',
					'div.comment_text' : function(arg){return simple_com_format(arg.context)},
					'a.reply @href' : function(arg){
						if(arg.context.data.comment.parent_type == 1){
							 return '/comments/' + arg.context.data.comment.id + '/comments'
						}else{
							return '/comments/' + arg.context.data.comment.id + '/reply'
						}
					},
					'a.reply @id' : 'data.comment.id',	
					'a.report @href' : '/comments/\#{data.comment.id}/report',
					'@id' : 'data.comment.id',
					'abbr.timeago @title' : 'data.comment.created_at'
				}
			);
			realtime_data_update_functions['Comment'] =
				function(data){
					//console.log("insert a comment v7");

					com = template_functions['comment'](data);

					// Insert into the new content stream
					if( data.data.comment.text.match(/\[\/quote\]/) ){
						var text =  data.data.comment.text.split(/\[\/quote\]/);
						text = text[ text.length - 1 ];
					}else{
						var text = data.data.comment.text;
					}
					
					var text_trunc = text.length > 100 ? text.substring(0,100) + '...' : text;
					var com_row = $('<tr class="comment" tp_id="' + data.data.comment.parent_id + '" com_id="' + data.data.comment.id + '"><td title="' + text + '">' + text_trunc + '</td></tr>');					
					if( !$('table#new_content tr:last').hasClass('striped') ){
						com_row.addClass('striped');
					}
					
					$('table#new_content').append(com_row).parent().scrollTop(99999999);
					com_row.effect('highlight', {color: '#D8F1AB'},5000);				
					
					var old_com = $('div.Comment[id="' + data.data.comment.id + '"]');
					if(old_com.size()>0){
						// replace the text only
						//console.log("replace the text only");
					  old_com.find('div.comment_text').replaceWith( $(com).find('div.comment_text'));
						reformat_comment_quote(old_com);
					}else{
						var par_div = $('div.talking_point_comments[id="' + data.data.comment.parent_id + '"]');
						if(par_div.size()>0){
							var last_com = par_div.find('div.Comment:last');
							if(last_com.size()>0){
								com = $(com).insertAfter(last_com);
							}else{
								com = $(com).insertBefore(par_div.find('form'));
							}
							reformat_comment_quote(com);
						}

						try{ // com doesn't always exist, if not inserted
							com.find('abbr').timeago();
						}catch(e){}
					}
				}
			//console.log("Comment template is ready");



	%script#talking_point_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/talking_point_post_it.html', :object => @talking_point, :as => :talking_point)}

	%script#create_talking_point_template
		:plain
			templates['TalkingPoint'] = $('<div></div>').html($.trim( $('script#talking_point_template').html() )).find('div:first');
			template_functions['TalkingPoint'] = templates['TalkingPoint'].compile(
				{
					'@id' : 'data.talking_point.id',
					'p.talking_point' : 'data.talking_point.text',
					'a.tp_show_coms@href' : '/talking_points/\#{data.talking_point.id}/comments',
					'a.edit@href' : '/talking_points/\#{data.talking_point.id}/edit'
				}
			);
			realtime_data_update_functions['TalkingPoint'] =
				function(data){
					// separate the diff from the text
					var text_pcs = data.data.talking_point.text.split('~~DIFF~TEXT~~');
					data.data.talking_point.text = text_pcs[0]
					if(text_pcs.length > 1){
						data.data.talking_point.new_cont_text = text_pcs[1]
					}else{
						data.data.talking_point.new_cont_text = text_pcs[0]
					}
					
					//console.log("insert a TalkingPoint v2 with id: " + data.data.talking_point.id);
					tp = template_functions['TalkingPoint'](data);
					
					// Insert into the new content stream
					// Is TP new or edited - assume I've already been told to rate it if it is new
					if(data.data.talking_point.version == 1){
						var tp_row = $('<tr class="talking_point" tp_id="' + data.data.talking_point.id + '"><td title="Click here to rate this talking point"><span class="rate">Rate:</span> ' + data.data.talking_point.text + '</td></tr>');					
					}else{
						var tp_row = $('<tr class="talking_point" tp_id="' + data.data.talking_point.id + '"><td>' + data.data.talking_point.new_cont_text + '<span class="edited"> (Edited)</span> </td></tr>');
					}
					$('table#new_content').append(tp_row).parent().scrollTop(99999999);
					tp_row.effect('highlight', {color: '#D8F1AB'},5000);				
	
					// in test mode change id or remove element
					//if(params['rtest']=='update'){
					//	// testing mode, change the id of the existing element in the page
					//	$('div.talking_point_post_it[id="' + data.data.talking_point.id + '"]').attr('id', '123123')
					//}else if(params['rtest']=='remove'){
					//	// testing mode, remove the original element so it won't be duplicated
					//	$('div.talking_point_post_it[id="' + data.data.talking_point.id + '"]').remove();
					//}
					
					// Either replace or insert
					// if the TP is displayed, just replace it's text and version
					var old_tp = $('div.talking_point_post_it[id="' + data.data.talking_point.id + '"]');
					if(old_tp.size()>0){
						old_tp.find('p.talking_point').html(data.data.talking_point.text);
						if(data.data.talking_point.version > 1){
							old_tp.find('a.versions').removeClass('hide').html( 'v' + data.data.talking_point.version);
						}
					}else{
						var par_div = $('div.worksheet[id="' + data.data.talking_point.question_id + '"] div.talking_point_matrix');
						if(par_div.size()>0){
							//console.log("insert a new TP")
							// insert a new tp
							tp = $(tp).insertBefore( par_div.find('div.talking_point_post_it.form') );
							temp.tp = tp;
							tp.effect('highlight', {color: '#D8F1AB'},5000);

							// fix the rating @id and @name
							var id = data.data.talking_point.id;
							tp.find(':radio').each(
								function(){
									var el = $(this);
									var val = el.val();
									el.attr('id','tp_rating_' + id + '_' + val);
									el.attr('name','tp_rating_' + id);
									el.parent().find('label').attr('for','tp_rating_' + id + '_' + val);
								}
							)
						}
					}				
				}

			//console.log("TalkingPoint template is ready");
			
			realtime_data_update_functions['TalkingPointPreference'] =
				function(data){
					//console.log("insert a TalkingPointPreference v1 with id: " + data.data.id) ;
					$('div.favorite[id="' + data.data.id + '"] p').html(data.data.count);
				}	
			//console.log("TalkingPointPreference function is ready")


			realtime_data_update_functions['TalkingPointAcceptableRating'] =
				function(data){
					//console.log("insert a TalkingPointAcceptableRating v2 with id: " + data.data.id);
					var vote_max = 0
					var num_votes = 0
					$.each(data.data.votes, 
						function(){
							vote = Number(this);
							num_votes += vote;
							if(vote > vote_max) vote_max = vote;
						}
					);
					//console.log("vote_max: " + vote_max + " num_votes: " + num_votes);
					var graph = $('div.talking_point_post_it[id="' + data.data.id + '"] div.graph.js')
					//console.log("graph.height(): " + graph.height());
					// forcefully reset the height for IE7
					graph.height( graph.height() )
					$('div.talking_point_post_it[id="' + data.data.id + '"] div.graph.js div').each(
						function(i,el){
							//console.log("height: data.data.votes[i]/vote_max * 100 + '%' " + data.data.votes[i]/vote_max * 100 + '%')
							$(el).height(data.data.votes[i]/vote_max * 100 + '%')
						}
					);
					
					$('div.talking_point_post_it[id="' + data.data.id + '"] p.talking_point_ratings').html(num_votes + (num_votes == 1 ? ' rating' : ' ratings'));
				}
				
			//console.log("TalkingPointAcceptableRating function is ready")

	-#%script#curated_talking_points_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/curated_talking_points2.html')}
		
	-#%script#create_curated_talking_points_template
		:plain
			templates['curated_talking_points'] = $('<div></div>').html($.trim( $('script#curated_talking_points_template').html() )).find('div:first');
			template_functions['curated_talking_points'] = templates['curated_talking_points'].compile(
				{
					'@id' : 'id'
					//'p.question' : 'question',
					//'div.header a@id' : 'id',
					//'div.header a@href' : 'close_href',
					//'div.curated@class+' : 'hide.curated',
					//'div.non_curated@class+' : 'hide.non_curated',				
					//'div.curator@class+' : 'hide.curator'
				}
			);
			