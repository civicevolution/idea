%div#get_templates_scripts
	%script
		:plain
			// some common functions
			templates = {};
			template_functions = {};
			realtime_data_update_functions = {};
			
			function simple_format(s){
				var strs = unescape(s).split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				return s.replace(/\n/g,'<br/>')
			}
			function simple_com_format(context){
				var s = unescape(context.data.comment.text);
				var strs = s.split(/\n\n/)
				s = ''
				for(var i=0;str=strs[i];i++) s += '<p>'+str+'</p>'
				s = s.replace(/\n/g,'<br/>')

				var author = '<a href="/members/' + context.ape_code + '/profile" class="com_author" data-remote="true">' + unescape(context.author.first_name + ' ' + context.author.last_name) + '</a>'

			  s = s.replace(/<p>/,'<p>' + author + ' ')
				//console.log("simple_com_format s: " + s)
				return s;
			}
			
			function reformat_comment_quote(com){
				var txt = com.find('div.comment_text').html();
				if(!txt.match(/\[quote=/)) return;
				var pcs = txt.match(/^(.*)\[quote="([^"]*)"\]([\s\S]*)\[\/quote\]([\s\S]*)$/);
				var author = pcs[1] + '</p>';
				var quote = '<div class="quote corner"><p class="quote">' + pcs[2] + ' said:</p><p>' + pcs[3] + '</p></div>	'
				pcs[4] = pcs[4].replace(/\n/,'').replace(/<br\/*>/gi,'\n').replace(/^\s*/,'').replace(/\n/g,'<br/>');
				var com_body = '<p>' + pcs[4];
				com.find('div.comment_text').html( author + quote + com_body);
			}
		  

	%script#comment_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/comment.html', :object => @comment)}
		
	%script#create_comment_template
		:plain
			templates['comment'] = $('<div></div>').html($.trim( $('script#comment_template').html() )).find('div:first');
			template_functions['comment'] = templates['comment'].compile(
				{
					'div.Comment_entry @id' : 'com_\#{data.comment.id}',	
					'img.i36 @src' : 'author.photo_url',
					'div.comment_text' : function(arg){return simple_com_format(arg.context)},
					'a.reply @href' : function(arg){
						if(arg.context.data.comment.parent_type == 1){
							 return '/comments/' + arg.context.data.comment.id + '/comments'
						}else{
							return '/comments/' + arg.context.data.comment.id + '/reply'
						}
					},
					'a.reply @id' : 'data.comment.id',	
					'a.report @href' : '/comments/\#{data.comment.id}/report',
					'@id' : 'data.comment.id',
					'abbr.timeago @title' : 'data.comment.created_at'
				}
			);
			realtime_data_update_functions['Comment'] =
				function(data){
					//console.log("insert a comment v7");
					// testing mode, change the id of the existing element in the page
					//$('div.Comment[id="' + data.data.comment.id + '"]').attr('id', '123123');
					
					com = template_functions['comment'](data);

					var old_com = $('div.Comment[id="' + data.data.comment.id + '"]');
					if(old_com.size()>0){
						// replace the text only
						//console.log("replace the text only");
					  old_com.find('div.comment_text').replaceWith( $(com).find('div.comment_text'));
						reformat_comment_quote(old_com);
					}else{
						switch(Number(data.data.comment.parent_type)){
							case 1:
								var par_div = $('div.ques_discussion');
								if(par_div.size()>0){
									com = $(com).appendTo(par_div);
								}
								break
							case 3:
								var par_div = $('div.comment_comments[id="' + data.data.comment.parent_id + '"]');
								if(par_div.size()>0){
									var form = par_div.find('form.orig');
									if(form.size()>0){
										com = $(com).insertBefore(form);
									}else{
										com = $(com).appendTo(par_div);
									}
									reformat_comment_quote(com);
								}
							
								break
							case 13:
								var par_div = $('div.talking_point_comments[id="' + data.data.comment.parent_id + '"]');
								if(par_div.size()>0){
									var form = par_div.find('form.orig');
									if(form.size()>0){
										com = $(com).insertBefore(form);
									}else{
										com = $(com).appendTo(par_div);
									}
									reformat_comment_quote(com);
								}
								break
						}
						try{ // com doesn't always exist, if not inserted
							com.find('abbr').timeago();
						}catch(e){}
					}
				}
			//console.log("Comment template is ready");



	%script#talking_point_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/talking_point.html', :object => @talking_point)}

	%script#create_talking_point_template
		:plain
			templates['TalkingPoint'] = $('<div></div>').html($.trim( $('script#talking_point_template').html() )).find('div:first');
			template_functions['TalkingPoint'] = templates['TalkingPoint'].compile(
				{
					'@id' : 'data.talking_point.id',
					'p.talking_point' : 'data.talking_point.text',
					'a.tp_show_coms@href' : '/talking_points/\#{data.talking_point.id}/comments',
					'a.edit@href' : '/talking_points/\#{data.talking_point.id}/edit',
					'a.report@href' : '/talking_points/\#{data.talking_point.id}/report'
				}
			);
			realtime_data_update_functions['TalkingPoint'] =
				function(data){
					//console.log("insert a TalkingPoint v2 with id: " + data.data.talking_point.id);
					temp.tp_data = data;

					tp = template_functions['TalkingPoint'](data);
					temp.tp_str = tp;
					
					var par_div = $('div.talking_points_list[id="' + data.data.talking_point.question_id + '"]');
					if(par_div.size()>0){
						// testing mode, change the id of the existing element in the page
						//par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]').attr('id', '123123')
						// testing mode, remove the original element so it won't be duplicated
						//par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]').remove();
						
						var old_tp = par_div.find('div.talking_point_entry[id="' + data.data.talking_point.id + '"]');
						if(old_tp.size()>0){
							// replace the text only
							//console.log("replace the text only");
						  old_tp.find('p.talking_point').html(data.data.talking_point.text);
							// update the versions link
							temp.old_tp = old_tp
							old_tp.find('a.versions').removeClass('hide').html( (data.data.talking_point.version - 1) + ((data.data.talking_point.version-1) == 1 ? ' version' : ' versions'));
						}else{
							//console.log("insert a new TP")
							// insert a new tp
							tp = $(tp).insertBefore( par_div.find('p.new_tp_insert_point') );
							temp.tp = tp;
							tp.find('div.my_rating').addClass('js') // arrange for compressed javascript enabled format
							tp.find('div.community_rating').removeClass('no_js');
							// fix the rating @id and @name
							var id = data.data.talking_point.id;
							tp.find(':radio').each(
								function(){
									var el = $(this);
									var val = el.val();
									el.attr('id','tp_rating_' + id + '_' + val);
									el.attr('name','tp_rating_' + id);
									el.parent().find('label').attr('for','tp_rating_' + id + '_' + val);
								}
							)
							var cb = tp.find(':checkbox');
							cb.attr('id','preference_' + id );
							cb.attr('name','preference_' + id);
							cb.parent().attr('for','preference_' + id );
							
						}
					}
				}

			//console.log("TalkingPoint template is ready");
			
			realtime_data_update_functions['TalkingPointPreference'] =
				function(data){
					//console.log("insert a TalkingPointPreference v1 with id: " + data.data.id) ;
					$('div.talking_point_entry[id="' + data.data.id + '"] span.fav_cnt').html(data.data.count);
				}	
			//console.log("TalkingPointPreference function is ready")


			realtime_data_update_functions['TalkingPointAcceptableRating'] =
				function(data){
					//console.log("insert a TalkingPointAcceptableRating v2 with id: " + data.data.id);
					
					var vote_max = 0
					var num_votes = 0
					$.each(data.data.votes, 
						function(){
							vote = Number(this);
							num_votes += vote;
							if(vote > vote_max) vote_max = vote;
						}
					);
					//console.log("vote_max: " + vote_max + " num_votes: " + num_votes);
					var graph = $('div.talking_point_entry[id="' + data.data.id + '"] div.graph.js')
					//console.log("graph.height(): " + graph.height());
					// forcefully reset the height for IE7
					graph.height( graph.height() )
					$('div.talking_point_entry[id="' + data.data.id + '"] div.graph.js div').not('.zero').each(
						function(i,el){
							//console.log("height: data.data.votes[i]/vote_max * 100 + '%' " + data.data.votes[i]/vote_max * 100 + '%')
							$(el).height(data.data.votes[i]/vote_max * 100 + '%')
						}
					);
					
					$('div.talking_point_entry[id="' + data.data.id + '"] p.talking_point_ratings').html(num_votes + (num_votes == 1 ? ' rating' : ' ratings'));
				}
				
			//console.log("TalkingPointAcceptableRating function is ready")

	%script#curated_talking_points_template{:type=>'text/html'}
		:plain
			#{render( :partial => 'plan/curated_talking_points.html')}
		
	%script#create_curated_talking_points_template
		:plain
			templates['curated_talking_points'] = $('<div></div>').html($.trim( $('script#curated_talking_points_template').html() )).find('div:first');
			template_functions['curated_talking_points'] = templates['curated_talking_points'].compile(
				{
					'@id' : 'id',
					'p.question' : 'question',
					'div.header a@id' : 'id',
					'div.header a@href' : 'close_href',
					'div.curated@class+' : 'hide.curated',
					'div.non_curated@class+' : 'hide.non_curated',				
					'div.curator@class+' : 'hide.curator'
				}
			);
			
			function open_question_worksheet(el){
				//console.log("insert a curated_talking_points list v2");
				el = $(el);
				var question_id = el.closest('div.question_summary').attr('id');
				//console.log("open_question_worksheet v2 ")
				// scroll to top of question
				$.scrollTo(el.closest('div.question_summary'),1000);				
				//$('div.right_side').fadeTo(2000,.2);
				$('div.right_side').hide(2000);

				var tp_sec = el.closest('div.question_summary').find('div.talking_points_list');
				var ul = el.closest('div.question_summary').find('ul');
				
				var curated_tps_exist = ul.attr('curated_tp_ids') && ul.attr('curated_tp_ids') != ''

				var data = {
					question: el.html(),
					id: question_id, 
					close_href: templates['curated_talking_points'].find('a.close_worksheet').attr('href').replace(/\d+/,question_id),
					hide:{ 
						curated: !am_curator && curated_tps_exist && ul.attr('auto_curated') == 't' ? '' : ' hide',
						non_curated: !am_curator && curated_tps_exist && ul.attr('auto_curated') == 'f' ? '' : ' hide',
						curator: am_curator && curated_tps_exist ? '' : ' hide'
					}
				}
				
				if(!curated_tps_exist) data.hide.non_curator_instr = ' hide'

				var ul_offset = ul.offset();
				
				var list_div = $(template_functions['curated_talking_points'](data)).appendTo('body');
				
				// only replace UL with a curated list
				if( curated_tps_exist ){
					list_div.find('ul.talking_points').replaceWith(ul.clone());
				}else{
					list_div.find('ul.talking_points').attr('id',question_id);
				}
				
				list_div.find('ul div').remove();
				list_div.addClass('curated_list corner')

				list_div.css({top: ul_offset.top, left: ul_offset.left, width: ul.width()});

				$('<div class="msg"><h2>...loading the talking points worksheet</h2></div>').insertAfter(tp_sec);
				tp_sec.hide(1000);

				list_div.animate({top: el.parent().offset().top + 20 +'px', left: ul_offset.left + 620 + 'px', width: '360px', 'font-size': '.9em'},1000,
					function(){
						$(this).css( {position: 'fixed', top: '4px'});
					}
				);

				init_currated_list(question_id);
				return false;
			}

			
			function close_question_worksheet(el){
				//$('div.right_side').fadeTo(2000,1)
				$('div.right_side').show(2000)
				el = $(el);

				if(el.attr('id')){ 
					// close comes from out of worksheet like curated list
					el = $('div.question_summary[id="' + el.attr('id') + '"] a.close_worksheet');
				}
				var worksheet = el.closest('div.worksheet');
				worksheet.slideUp(2000);
				
				// scroll to top of question
				$.scrollTo(el.closest('div.question_summary'),1000);

				q = worksheet.closest('div.question_summary').children('p.question');
				var new_top = q.offset().top + q.height();
				var new_left = q.offset().left;
			
				var div_list = $('div.curated_list[id="' + worksheet.attr('id') + '"]');
				
				var inner_list = div_list.find('div.talking_points_list');
				inner_list.attr('position','relative');
				msg = $('<div class="msg"><p>Verifying current talking points</p></div>').appendTo(inner_list);
				msg.fadeTo(500,.7);
				
				div_list.css({position: 'absolute', top: document.body.scrollTop})
				div_list.find('p.question').remove();
				div_list.find('div.hint').slideUp(1000)
				div_list.animate({top: new_top+'px', left: new_left + 'px', width: q.width() + 'px', 'font-size': '1.2em'},1000);
			}
			
			
			function init_currated_list(question_id){
				if( !am_curator ) return;
				//console.log("init_currated_list for " + question_id);
				$('div.curated_list[id="' + question_id + '"] li.talking_point img').die('click').live('click',
					function(){
						$(this).closest('li').slideUp(800,
							function(){ 
								var ul = $(this).closest('ul');
								$(this).remove();
								update_curated_tp_ids( ul )
							}
						);
					}
				);

				$('div.curated_list[id="' + question_id + '"] ul.talking_points').sortable(
					{
						start: function(event,ui){
							$(this).find('img').removeClass('show');
						},
						stop: function(event,ui){
							li = $('<li class="talking_point" id="' + ui.item.attr('id') + '">' + ui.item.html() + 
								'<img src="/images/delete_icon_16.gif" title="Click to delete"></li>')
							ui.item.replaceWith(li);
							if( li.parent().find('li[id="' + li.attr('id') + '"]').size() > 1 ){
								li.html('<h3>Duplicate!</h3>');
								li.fadeOut(1400,function(){$(this).remove()})
							}
							li.parent().find('li.talking_point[id="0"]').remove();
							update_curated_tp_ids( $(this) );
						},
						cursor: 'pointer',
						placeholder: 'curated_list_placeholder'
					}
				);
				
				function update_curated_tp_ids($ul){
					var question_id = $ul.attr('id');
					var curated_ids = $ul.attr('curated_tp_ids')
					var new_ids = $ul.sortable('toArray').toString();
					if(curated_ids == new_ids){
						//console.log("Curated_tp_ids hasn't changed, do not send");
					}else{
						//console.log("Send these ids to the server: " + new_ids + " for question_id: " + question_id);
						$.post('/questions/' + question_id + '/curate_tps', {tp_ids: new_ids}, 
							function(){
								$('div.curated_list[id="' + question_id + '"] ul.talking_points').attr('curated_tp_ids',new_ids);
							}, 
							"script"
						);
					}
					$ul.sortable('refresh');
					tp_delete_hover( question_id );
				}

				function tp_delete_hover(question_id){
					//console.log("tp_delete_hover for id: " + question_id)
					$('div.curated_list[id="' + question_id + '"] li.talking_point').hover(
						function(){
							$(this).find('img').addClass('show');
							//console.log("show trash can");
						},
						function(){
							//console.log("hide trash can");
							$(this).find('img').removeClass('show');
						}
					);
				}

				tp_delete_hover(question_id);
			}

			
			
			//console.log("Curated_talking_points template is ready");
	

				
				
				
				
			